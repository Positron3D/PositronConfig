#                         ###                  
#                       ### ###                
#               #######################        
#               ##     ##     ##     ##        
#               ##    ##       ##    ##        
#               ##   ##         ##   ##        
#              ###  ##           ##  ###       
#            ##### ##             ## #####     
#          #########               #########   
#        #########                   ######### 
#          #######                   #######   
#            #####                   #####     
#              ###                   ###       
#               ##                   ##        
#               #######################        
#                   ###############            
#                     ###########              
#                       #######                
#                         ###                  
#   ___  ___  ___ ___ _____ ___  ___  _  _   _______  
#  | _ \/ _ \/ __|_ _|_   _| _ \/ _ \| \| | |__ /   \ 
#  |  _/ (_) \__ \| |  | | |   / (_) | .` |  |_ \ |) |
#  |_|  \___/|___/___| |_| |_|_\\___/|_|\_| |___/___/ 
#
#####################################################################

# This file contains the Klipper macros for the Positron v3.2
# designed by the Positron 3D team in partnership with LDO

# PositronConfig v1.2.3

#####################################################################
#   Fluidd/Mainsail
#####################################################################

# Fluidd and Mainsail provide a variable setup that let you customize
# the provided PAUSE, RESUME and CANCEL_PRINT macros. If you need,
# your own park position or something, simply copy the definitions
# from fluidd.cfg and include it in this section

[gcode_macro _CLIENT_VARIABLE]
variable_use_custom_pos   : True
variable_custom_park_x    : 90
variable_custom_park_y    : 170
variable_custom_park_dz   : 20.0
variable_park_at_cancel   : True
variable_park_at_cancel_x : 90
variable_park_at_cancel_y : 90
gcode:

#####################################################################
#   Homing Macros
#####################################################################

## Macros for sensorless, z-safe, and conditional homing

[force_move]
enable_force_move: true

[homing_override]
gcode:
    SAVE_GCODE_STATE NAME=STATE_HOME_OVERRIDE
    QUERY_ENDSTOPS
    # Forwards parameters to other macro after updating endstops
    _HOMING_ROUTINE VALUE="{rawparams}"
    
    RESTORE_GCODE_STATE NAME=STATE_HOME_OVERRIDE


[gcode_macro _HOMING_ROUTINE]
gcode:
    {% set hparams = params.VALUE %}

    {% set rq_all = 'X' not in hparams and 'Y' not in hparams and 'Z' not in hparams %}
    {% set rq_x = 'X' in hparams %}
    {% set rq_y = 'Y' in hparams %}
    {% set rq_z = 'Z' in hparams %} 

    {% set opt = 'O' in hparams %}

    {% set home_all = rq_all and not (opt and "x" in printer.toolhead.homed_axes and "y" in printer.toolhead.homed_axes and "z" in printer.toolhead.homed_axes) %}
    {% set home_x = rq_x and not (opt and "x" in printer.toolhead.homed_axes) %}
    {% set home_y = rq_y and not (opt and "y" in printer.toolhead.homed_axes) %}
    {% set home_z = rq_z and not (opt and "z" in printer.toolhead.homed_axes) %}

    {% if home_all or home_x or home_y or home_z %}

        #QUERY_ENDSTOPS
        {% set bad_z = printer.query_endstops.last_query["z"] or ("z" in printer.toolhead.homes_axes and position.z < 10) %}
        {% if bad_z %}
            FORCE_MOVE STEPPER=stepper_z DISTANCE=30 VELOCITY=20 ACCEL=100
        {% endif %}

        {% if home_all or home_y %}
            _HOME_Y
            G90
            G0 Y{(printer.toolhead.axis_maximum.y|float + printer.toolhead.axis_minimum.y|float) / 2.0} F3600
        {% endif %}

        {% if home_all or home_x %}
            _HOME_X
            G90
            G0 X{(printer.toolhead.axis_maximum.x|float + printer.toolhead.axis_minimum.x|float) / 2.0} F3600
        {% endif %}

        {% if home_all or home_z or bad_z %}
            G28 Z
            G91
            G0 Z10 F1200
        {% endif %}

    {% endif %}
    

[gcode_macro _HOME_X]
gcode:
    # Set current for sensorless homing
    SET_TMC_CURRENT STEPPER=stepper_x CURRENT={printer.configfile.settings['tmc2209 stepper_x'].run_current|float}
    SET_TMC_CURRENT STEPPER=stepper_y CURRENT={printer.configfile.settings['tmc2209 stepper_y'].run_current|float}

    SAVE_GCODE_STATE NAME=STATE_HOME_X

    # Wait just a second… (give StallGuard registers time to clear)
    G4 P500

    # Home
    G28 X
    # Move away
    G91
    G0 X5 F1200

    RESTORE_GCODE_STATE NAME=STATE_HOME_X


[gcode_macro _HOME_Y]
gcode:
    # Set current for sensorless homing
    SET_TMC_CURRENT STEPPER=stepper_x CURRENT={printer.configfile.settings['tmc2209 stepper_x'].run_current|float}
    SET_TMC_CURRENT STEPPER=stepper_y CURRENT={printer.configfile.settings['tmc2209 stepper_y'].run_current|float}

    SAVE_GCODE_STATE NAME=STATE_HOME_Y

    # Wait just a second… (give StallGuard registers time to clear)
    G4 P500

    # Home
    G28 Y
    # Move away
    G91
    G0 Y-5 F1200

    RESTORE_GCODE_STATE NAME=STATE_HOME_Y


[gcode_macro CHOME]
description: Alias for G28 O
gcode:
    G28 O


#####################################################################
#   Sound Macro
#####################################################################

[gcode_macro M300]
description: Implements M300 gcode which allows beeper to be used
gcode:
    {% set TIME_MS = params.P|default(100)|float %}
    SET_PIN PIN=_buzzer VALUE=1
    G4 P{TIME_MS}
    SET_PIN PIN=_buzzer VALUE=0

#####################################################################
#   Position Macros
#####################################################################

[gcode_macro CENTER]
description: Moves the toolhead to the center
gcode:
    G28 X Y O
    {% set x_center = (printer.toolhead.axis_maximum.x|float + printer.toolhead.axis_minimum.x|float) / 2.0 %}
    {% set y_center = (printer.toolhead.axis_maximum.y|float + printer.toolhead.axis_minimum.y|float) / 2.0 %}
    G90
    G0 X{x_center} Y{x_center} F7800


[gcode_macro FRONT]
description: Moves the toolhead to the front
gcode:
    G28 X Y O
    {% set x_center = (printer.toolhead.axis_maximum.x|float + printer.toolhead.axis_minimum.x|float) / 2.0 %}
    {% set y_front = printer.toolhead.axis_maximum.y|float - 10 %}
    G90
    G0 X{x_center} Y{y_front} F7800


[gcode_macro LOAD_POSITION]
description: Move the toolhead to the front left corner
gcode:
    G28 X Y O
    {% set x_left  = printer.toolhead.axis_minimum.x|float + 10 %}
    {% set y_front = printer.toolhead.axis_maximum.y|float - 10 %}
    G90
    G0 X{x_left} Y{y_front} F7800


#####################################################################
#   Filament Macros
#####################################################################

[gcode_macro _FILAMENT_CHANGE_VARIABLES]
variable_preload_speed: 400
variable_preload_distance: 30
variable_load_speed: 2000
variable_load_distance: 300
variable_prime_speed: 200
variable_prime_distamce: 30
gcode:


[gcode_macro UNLOAD_FILAMENT]
description: Unloads filament from toolhead. EXTRUDER_TEMP defaults to 210 if hotend is cold
gcode:
    {% set EXTRUDER_TEMP = params.TEMP|default(210)|int %}
    {% set MIN_TEMP = params.TEMP|default(210)|float * 0.98 %}
    {% set CURRENT_TARGET = printer.extruder.target|float %}
    SAVE_GCODE_STATE NAME=UNLOAD_FILAMENT

    ;Set EXTRUDER_TEMP
    M104 S{EXTRUDER_TEMP}
    
    ;Home if needed (per axis) and move to load position
    G28 X Y Z O
    LOAD_POSITION

    {% if EXTRUDER_TEMP != 0 %}
        LED_PENDING
        {% if CURRENT_TARGET < EXTRUDER_TEMP %}
            M104 S{EXTRUDER_TEMP} ; only heat up if the current extruder is not already hot
        {% endif %}
        TEMPERATURE_WAIT SENSOR="extruder" MINIMUM={MIN_TEMP} ; wait for min extrude temp to reach
    {% endif %}
    LED_WORKING
    M83                         ; set extruder to relative mode
    G0 E10 F300                 ; extrude a little to soften tip
    G0 E-30 F3600               ; quickly retract a small amount to elimate stringing
    G4 P200                     ; pause for a short amount of time
    G1 E-400 F1200              ; retract slowly the rest of the way
    M400                        ; wait for moves to finish
    RESTORE_GCODE_STATE NAME=UNLOAD_FILAMENT
    M300 P400                   ; beep to indicate unload complete
    M117 Unload Complete!
    LED_READY


[gcode_macro LOAD_FILAMENT]
description: Loads new filament into toolhead. EXTRUDER_TEMP defaults to 210 if hotend is cold
gcode:
    {% set EXTRUDER_TEMP = params.TEMP|default(210)|int %}
    {% set MIN_TEMP = params.TEMP|default(210)|float * 0.98 %}
    {% set CURRENT_TARGET = printer.extruder.target|float %}
    {% set Z_TARGET = [[printer.toolhead.position.z|default(0)|float + 100,printer.toolhead.axis_maximum.z|float - 10]|min, printer.toolhead.position.z|default(0)|float]|max %}
    SAVE_GCODE_STATE NAME=LOAD_FILAMENT
    G28 O
    G90             ; absolute positioning
    G1 Z{Z_TARGET}  ; move nozzle upwards
    FRONT           ; move the toolhead to the front

    {% if EXTRUDER_TEMP != 0 %}
        LED_PENDING
        {% if CURRENT_TARGET < EXTRUDER_TEMP %}
            M104 S{EXTRUDER_TEMP}                               ; only heat up if the current extruder is not already hot
        {% endif %}
        TEMPERATURE_WAIT SENSOR="extruder" MINIMUM={MIN_TEMP}   ; wait for min extrude temp to reach
    {% endif %}

    LED_WORKING
    M83                         ; set extruder to relative mode
    M106 S255                   ; Set part cooling fan to max    
    G1 E400 F1200               ; extrude slowly
    G1 E20 F600
    M107                        ; turn off part cooling fan
    M400                        ; wait for moves to finish
    M300 P200                   ; two short beeps to indicate load complete
    G4 P100
    M300 P200
    RESTORE_GCODE_STATE NAME=LOAD_FILAMENT
    M117 Load Complete!
    LED_READY


[gcode_macro M600]
description: Implements M600 gcode (pause & filament change)
gcode: 
    SAVE_GCODE_STATE NAME=M600
    PAUSE
    UNLOAD_FILAMENT
    LOAD_FILAMENT
    RESUME
    RESTORE_GCODE_STATE NAME=M600


#####################################################################
#   Print Macros
#####################################################################

[gcode_macro PRINT_START]
description: print startup sequence
gcode:
    {% set BED_TEMP = params.BED|default(65)|float %}
    {% set READY_TEMP = BED_TEMP * 0.9 %}
    {% set EXTRUDER_TEMP = params.EXTRUDER|default(190)|float %}

    SAVE_GCODE_STATE NAME=STATE_PRINT_START
    LED_PENDING
    ;PCF_CHECK                          ; test part cooling fan, disable for fans without tachometer
    M107                                ; turn off part fan
    M140 S{BED_TEMP}                    ; set bed temperature
    G28                                 ; home all
    NOZZLE_DOCK                         ; move the nozzle to docking position

    TEMPERATURE_WAIT SENSOR="heater_bed" MINIMUM={READY_TEMP}   ; wait for bed to mostly heat up 

    M109 S{EXTRUDER_TEMP}               ; set and wait for hot end temperature
    M190 S{BED_TEMP}                    ; wait for bed temperature
    NOZZLE_UNDOCK                       ; undock the nozzle 

    G90                                 ; use absolute coordinates
    RESTORE_GCODE_STATE NAME=STATE_PRINT_START
    LED_WORKING
    NOZZLE_PURGE


[gcode_macro PCF_CHECK]
description: Use before print startup, checks the part fan for failures
gcode:
    M106 S128       ; turn on the part fan
    G4 P2000        ; wait for the fan to spin up
    M400            ; wait for wait to finish
    _PCF_CHECKER    ; check part fan speed & respond
    M106 S0         ; turn off the part fan


[gcode_macro _PCF_CHECKER]
description: Helper macro for PCF_CHECK
gcode:
    {% if printer.fan.rpm is not none %}
        {% if printer.fan.rpm > 500 %}
            {action_respond_info("Part cooling fan self-test: PASS")}
        {% else %}
            CANCEL_PRINT
            {action_respond_info("Part cooling fan self-test: FAIL!")}
        {% endif %}
    {% endif %}


[gcode_macro NOZZLE_PURGE]
description: Draw a purge line at the front left edge of the build plate
gcode:
    G28 O
    SAVE_GCODE_STATE NAME=NOZZLE_PURGE
    G90                     ; Use absolute coordinates
    G0 X0 Y40 F7200         ; Go to side
    G0 Z0.2                 ; Drop to bed
    M83                     ; Set extruder to relative mode
    G1 X0 Y135 E30 F800     ; print prime line
    G1 E-0.5 F400           ; Retract a little
    G1 Y170 F4000           ; Quickly wipe away from the filament line
    G1 Z0.4                 ; Raise and begin printing.
    RESTORE_GCODE_STATE NAME=NOZZLE_PURGE


[gcode_macro NOZZLE_DOCK]
description: Docks the nozzle at the corner of the bed to prevent ooze
variable_dock_x: 3.5
variable_dock_y: 1.0
variable_dock_z: 0.0
gcode:
    G28 O
    SAVE_GCODE_STATE NAME=NOZZLE_DOCK
    G91                           ; relative positioning
    G1 Z5                         ; move nozzle upwards slightly
    G90                           ; absolute positioning
    G0 X{dock_x} Y{dock_y} F7200  ; Go dock position
    G0 Z{dock_z}
    RESTORE_GCODE_STATE NAME=NOZZLE_DOCK


[gcode_macro NOZZLE_UNDOCK]
description: Safely moves the nozzle out of its docking position
gcode:
    G28 O
    SAVE_GCODE_STATE NAME=NOZZLE_UNDOCK
    G91                            ; relative positioning
    G1 Z10                         ; move nozzle upwards slightly
    RESTORE_GCODE_STATE NAME=NOZZLE_UNDOCK


[gcode_macro PRINT_END]
description: print finish sequence
gcode:
    {% set th = printer.toolhead %}
    {% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}
    {% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}
    {% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}
    {% set y_final = th.axis_maximum.y - 1 %}
    {% set z_final = [th.position.z + 50, th.axis_maximum.z]|min %}

    SAVE_GCODE_STATE NAME=STATE_PRINT_END
    M400                                     ; wait for buffer to clear
    G92 E0                                   ; zero the extruder
    G1 E-5.0 F3600                           ; retract filament
    TURN_OFF_HEATERS

    G90                                      ; absolute positioning
    G0 X{x_safe} Y{y_safe} Z{z_safe} F20000  ; move nozzle to remove stringing
    G0 X5 Y{y_final} F3600                   ; park the toolhead to the front corner
    G0 Z{z_final} F600                       ; raise the bed

    M107                                     ; turn off part fan
    LED_COMPLETE
    RESTORE_GCODE_STATE NAME=STATE_PRINT_END


#####################################################################
#   LED Macros
#####################################################################

[gcode_macro LED_PENDING]
description: sets the _indicators to teal
gcode:
    SET_LED LED=_indicator RED=0 GREEN=0.4 BLUE=0.2 INDEX=1 TRANSMIT=0
    SET_LED LED=_indicator RED=0 GREEN=0.4 BLUE=0.2 INDEX=3 


[gcode_macro LED_ALERT]
description: sets the _indicators to yellow
gcode:
    SET_LED LED=_indicator RED=0.6 GREEN=0.6 BLUE=0 INDEX=1 TRANSMIT=0
    SET_LED LED=_indicator RED=0.6 GREEN=0.6 BLUE=0 INDEX=3 


[gcode_macro LED_WORKING]
description: sets the _indicators to purple
gcode:
    SET_LED LED=_indicator RED=0.5 GREEN=0.1 BLUE=0.6 INDEX=1 TRANSMIT=0
    SET_LED LED=_indicator RED=0.5 GREEN=0.1 BLUE=0.6 INDEX=3 


[gcode_macro LED_COMPLETE]
description: sets the _indicators to green
gcode:
    SET_LED LED=_indicator RED=0 GREEN=0.8 BLUE=0 INDEX=1 TRANSMIT=0
    SET_LED LED=_indicator RED=0 GREEN=0.8 BLUE=0 INDEX=3 


[gcode_macro LED_ERROR]
description: sets the _indicators to red
gcode:
    SET_LED LED=_indicator RED=0.6 GREEN=0 BLUE=0 INDEX=1 TRANSMIT=0
    SET_LED LED=_indicator RED=0.6 GREEN=0 BLUE=0 INDEX=3 


[gcode_macro LED_READY]
description: sets the _indicators and light strips to white
gcode:
    SET_LED LED=_indicator RED=0.5 GREEN=0.5 BLUE=0.5 INDEX=1 TRANSMIT=0
    SET_LED LED=_indicator RED=0.05 GREEN=0.08 BLUE=0.1 INDEX=2 TRANSMIT=0
    SET_LED LED=_indicator RED=0.5 GREEN=0.5 BLUE=0.5 INDEX=3 TRANSMIT=0
    SET_LED LED=_indicator RED=1.0 GREEN=1.0 BLUE=1.0 INDEX=4 TRANSMIT=0
    SET_LED LED=_indicator RED=1.0 GREEN=1.0 BLUE=1.0 INDEX=5


[gcode_macro LED_OFF]
gcode:
    SET_LED LED=_indicator RED=0 GREEN=0 BLUE=0


[delayed_gcode STARTUP_CODE]
initial_duration: 0.5
gcode:
    LED_READY